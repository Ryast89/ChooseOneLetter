/***************************************************************************************
* Name:        GameTemplate for Change One leter
* Author:      Ryan Stroebel and Kunga Oesel
* Date:        Apr 20, 2018
* Purpose:     Shows how to create an interactive, graphical application in Java using
               Dialog Boxes from JOptionPane for user input.
****************************************************************************************/

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import java.io.*;

public class GameTemplate extends JPanel {
    static Image bgImage1;              // image displayed while play occurs for part 1
    static Image bgImage2;              // image displayed while play occurs for part 2
    static JPanel panel;                 // main drawing panel
    static JFrame frame;                 // window frame which contains the panel
    static final int WINDOW_WIDTH = 800; // width of display window
    static final int WINDOW_HEIGHT = 600;// height of display window
	static String s = "";
    static int gameStage = 0;            // stages of game
    static final int WELCOME_SCREEN = 0;
    static final int MENU = 1;
    static final int INSTRUCTIONS = 2;
	static final int ENTER_NAMES = 3;
	static final int CHOOSE_DIFFICULTY = 4;
    static final int PLAY = 5;
    static final int END_GAME = 6;
	static String p1Name = "";
	static String p2Name = "";
    static int numPlayers = 0;                     // number of players
	static int numRand = 0;
    static double runningTotal = 0;                // runningTotal of game
    static int turn = 1;                           // current turn of game (starts at turn 1)
    static String dataEntered = "";                 // input from user
    static boolean resetDataEntered = false;       // used to reset dataEntered to empty string
    static String currentPlayer = "";              // tracks the currentplayer
    static String currentWord = "";                 // tracks the currentWord
	static String goalWord = "";					//tracks the goal word
	static String currentWord2 = "";                 // a current word that does not change the original
	static String dataEntered2 = "";				//Data entered that can be changed seperately from the actual data
    static String playOutput = "";                 // output to panel
	static String playOutput0 = "";                 // output to panel
    static String playOutput1 = "";                 // output to panel 
    static String playOutput2 = "";                 // output to panel 
    static String playOutput3 = "";                 // output to panel 
    static String playOutput4 = "";                 // output to panel 
	static String playOutput5 = "";					// output to panel
	static String playOutput6 = "";
    static String playOutputList = "";              // output all steps
    static String instructionsText = "";            // instructions
	public static String[] dictionary = getFileContents("dictionary.txt"); // declares dictionary for the whole class, can be used in any method

    // start main program
	// * initializes the window for the game
    public static void main (String args[]) {
        // Create Image Object
        Toolkit tk = Toolkit.getDefaultToolkit();

        // Load background images
		URL url = GameTemplate.class.getResource("bg1.jpg");
        bgImage1 = tk.getImage(url);
      //  url = GameTemplate.class.getResource("bg2.jpg");
      //  bgImage2 = tk.getImage(url);
		
		
		
  
        // Create Frame and Panel to display graphics in
  
        panel = new GameTemplate(); /*****MUST CALL THIS CLASS (ie same as filename) ****/
  
        panel.setPreferredSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT));  // set size of application window
        frame = new JFrame ("THE CHANGER OF LETTERS");  // set title of window
        frame.add (panel);
  
        // add a key input listener (defined below) to our canvas so we can respond to key pressed
        frame.addKeyListener(new KeyInputHandler());
        
        // exits window if close button pressed
        frame.addWindowListener(new ExitListener());
  
  
        // request the focus so key events come to the frame
        frame.requestFocus();
        frame.pack();
        frame.setVisible(true);
  
    } // main
	
	
	// getting the contents of a file in the same folder
	public static String[] getFileContents(String fileName) {
		String[] contents = null;
		int length = 0;
		try {
			// input
			String folderName = ""; // if the file is contained in the same folder as the .class file, make this equal to the empty string
			String resource = fileName;
	
			// this is the path within the jar file
			InputStream input = GameTemplate.class.getResourceAsStream(folderName + resource);
			if (input == null) {
				// this is how we load file within editor (eg eclipse)
				input = GameTemplate.class.getClassLoader().getResourceAsStream(resource);
			} // if
			BufferedReader in = new BufferedReader(new InputStreamReader(input));
			in.mark(Short.MAX_VALUE);  // see api
	
			// count number of lines in file
			while (in.readLine() != null) {
				length++;
			} // while
	
			in.reset(); // rewind the reader to the start of file
			contents = new String[length]; // give size to contents array
	
			// read in contents of file and print to screen
			for (int i = 0; i < length; i++) {
				contents[i] = in.readLine();
			} // for
			in.close();
		} catch (Exception e) {
			System.out.println("File Input Error");
		} // try

		return contents;
	} // getFileContents

	// method for checking if a word is in dictionary
	public static boolean checkDictionary(String word) {
			// checks if the word in the parameter is in the dictionary
		for (int i = 0; i < dictionary.length; i++) {
			if (dictionary[i].contains(word)) {
				return true;
			} // if
		} // for
		return false;
	} // checkDictionary

	
   /*
   * paintComponent gets called whenever panel.repaint() is
   * called or when frame.pack()/frame.show() is called. It paints
   * to the screen.  Since we want to paint different things
   * depending on what stage of the game we are in, a variable
   * "gameStage" will keep track of this.
   */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);   // calls the paintComponent method of JPanel to display the background

        // display welcome screen
        if (gameStage == WELCOME_SCREEN) {
			
			// sets color using RGB values
            g.setColor(new Color(240, 102, 140) );

			// draw background
            g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
            

            g.setColor(Color.black);
            g.setFont(new Font("Garamond", Font.BOLD, 16));   // set font
            g.drawString("Welcome to", 360, 260);
            g.drawString("Press any key to continue.",310,330);

            g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 36));   // set font
			s = "THE CHANGER OF LETTERS";
            g.drawString(s, (WINDOW_WIDTH - g.getFontMetrics().stringWidth(s))/2,300);  // display


        // display menu
        } else if (gameStage == MENU) {
			
			
			g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
			g.drawImage(bgImage1, 0, 0, this);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 36));   // set font
            drawString(g, "Change One Letter Game",180,180);  // display
            g.setFont(new Font("Garamond", Font.BOLD, 16));   // set font
            instructionsText = "Please make one of the following choices:\n\n1) Display Instructions.\n\n2) One Player Game\n\n3) Two Player Game\n\n4) Exit";
            drawString(g, instructionsText,230,280);  // display
			
		} else if (gameStage == CHOOSE_DIFFICULTY) {
			
			
			g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
			g.drawImage(bgImage1, 0, 0, this);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 36));   // set font
            drawString(g, "Change One Letter Game",180,180);  // display
            g.setFont(new Font("Garamond", Font.BOLD, 16));   // set font
            instructionsText = "Please make one of the following choices:\n\n1) Easy difficulty\n\n2) Medium difficulty\n\n3) Hard difficulty\n(Warning! This mode can be impossible!)\n\n4 Exit";
            drawString(g, instructionsText,230,280);  // display
           
        // display instructions
        } else if (gameStage == INSTRUCTIONS) {
			
			
			g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
			g.drawImage(bgImage1, 0, 0, this);
            g.setColor(Color.white);
			g.drawRect (25, 25, (WINDOW_WIDTH-50), (WINDOW_HEIGHT-50));
            g.setFont(new Font("Garamond", Font.BOLD, 36));   // set font
			s = "Instructions";
            g.drawString(s, (WINDOW_WIDTH - g.getFontMetrics().stringWidth(s))/2,100);    // display title
            g.setFont(new Font("Garamond", Font.PLAIN, 18));   // set font
            
            instructionsText = "1. Both players choose an english word: one to start with, the other to get to. \n\n2. Each player then takes turns changing one letter of that word to make another word.\n\n3. When the word is reached, the player that last changed it wins.\n\n4. Have fun!";
            drawString(g, instructionsText, 65, 150);  // display instructions

			
		//display interface to get usernames
		} else if (gameStage == ENTER_NAMES) {
			g.drawImage(bgImage1, 0, 0, this);
			g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 36));   // set font
            drawString(g, playOutput, 100,100);    // display title
			g.setColor(Color.red);
			g.setFont(new Font("Garamond", Font.BOLD, 48));
			drawString(g, playOutput2, 100,250);    // display title
			
        // display game play
        // * if you want different types of display for different
        // * parts of the play, add additional stages (ie PLAY2, PLAY3 etc)
        } else if (gameStage == PLAY) {
            
            g.setColor(new Color(24,160,202));

            g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);


            // set font and colour
			g.drawImage(bgImage1, 0, 0, this);
			g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            
            // display contents of playOutput strings
            // * these have been set in other methods during game play
			
			g.setColor(Color.white);
			g.setFont( new Font("Garamond", Font.BOLD, 16));
            drawString(g, playOutput1, 700, 135);
			
			g.setColor(new Color(135,206,250));
			g.setFont( new Font("Garamond", Font.BOLD, 16));
			drawString(g, playOutput, 20,150);
			
			g.setColor(new Color(211,187,224));
			g.setFont( new Font("Garamond", Font.BOLD, 20));
            drawString(g, playOutput3, 20, 300);
			
			g.setColor(new Color(241,151,246));//(243,226,232)
			g.setFont( new Font("Serif", Font.ITALIC, 50));
			drawString(g, playOutput0, 70, 3);			
             
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 24));
            drawString(g, playOutput4, 20, 200);
			
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 20));
            drawString(g, playOutput5, 600, 90);
            
			g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 20));
            drawString(g, playOutput6, 20, 100);
			
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 36));
            drawString(g, playOutput2, 20, 250); 
            
            // display all turns in a box on right side
            g.setColor(new Color(135,206,250));
			g.drawRect (580, 135, 200, 400);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            drawString(g, playOutputList, 600, 120); 
         } 
		 
		 // display end of game
		 else {
			 g.drawImage(bgImage1, 0, 0, this);
              // set font and colour
            g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            
            // display contents of playOutput strings
            drawString(g, playOutput, 20,50);  
            drawString(g, playOutput1, 20, 100); 
            drawString(g, playOutput2, 20, 150); 			
            drawString(g, playOutput3, 20, 200); 
			drawString(g, playOutput4, 20, 250);
			drawString(g, playOutput0, 20, 3);
		 
          } // else
    } // paintComponent

    /* A class to handle keyboard input from the user.
    * Implemented as a inner class because it is not
    * needed outside the EvenAndOdd class.
    */
    private static class KeyInputHandler extends KeyAdapter {
        public void keyTyped(KeyEvent e) {
            // quit if the user presses "escape"
            if (e.getKeyChar() == 27) {
                System.exit(0);
            } else if (gameStage == MENU) {

            // respond to menu selection
                switch (e.getKeyChar()) {
                    case 49:  showInstructions(); break;             // Key "1" pressed
                    case 50:  numPlayers = 1; showChooseDifficulty(); break;    // Key "2" pressed
                    case 51:  numPlayers = 2; showGetUserNames(); break;     // Key "3" pressed
                    case 52:  System.exit(0);                        // Key "4" pressed
                } // switch
            } else if (gameStage == CHOOSE_DIFFICULTY) {

            // respond to menu selection
                switch (e.getKeyChar()) {
                    case 49:  numRand = 5; showGetUserNames(); break;             // Key "1" pressed
                    case 50:  numRand = 15; showGetUserNames();  break;    // Key "2" pressed
                    case 51:  numRand = -1; showGetUserNames();  break;     // Key "3" pressed
                    case 52:  System.exit(0);                        // Key "4" pressed
                } // switch
			
			//respond to keys typed when user(s) enter names
			} else if(gameStage == ENTER_NAMES) {
				if (resetDataEntered) {
                    resetDataEntered = false;
                    dataEntered = "";
                  }
			  // if user hits enter, record what is typed in
                  if (e.getKeyChar() == Event.ENTER) {
                    saveUserName();
				} else {
				 recordKey(e.getKeyChar());
				}
			
			}
			
			// respond to keys typed during game play
			else if (gameStage == PLAY) {

                  // computer turn
                  if (isComputerTurn()) {
                      computerTakeTurn();
                      return;
                  }
            
                  // clear typed input
                  if (resetDataEntered) {
                    resetDataEntered = false;
                    dataEntered = "";
                  }

                  // if user hits enter, record what is typed in
                  if (e.getKeyChar() == Event.ENTER) {
                    saveInput();
                    
                    // end game after 10 turns, you will want to change this condition
                    if (currentWord.equals(goalWord)) {
                      endGame();
                    }

                  } else {
                    recordKey(e.getKeyChar());
                  }
			}
			
			// if all else fails, show menu
			else {
                showMenu();
            } // else
        } // keyTyped
    } // KeyInputHandler class

	// add key typed to dataEntered
    private static void recordKey(char key) {

        // backspace pressed -> removes characters
         if (key == 8 && dataEntered.length() > 0) {
              dataEntered = dataEntered.substring(0,dataEntered.length()-1);
         } 
         
         // otherwise add key typed to dataEntered
         else {
              dataEntered += (key + "");
         }
         playOutput4 = getCurrentPlayer() + " entered ";
         playOutput2 = dataEntered;
         panel.repaint();
    }    

    // returns name of currentPlayer
    private static String getCurrentPlayer(){
        if (numPlayers == 2) {
            return (turn%2 != 0) ? p1Name : p2Name;
        } else {
            return (turn%2 != 0) ? p1Name : "Computer";
        }
    
    } // getCurrentPlayer
    
    // returns name of other player
    private static String getOtherPlayer(){
        if (numPlayers == 2) {
            return (turn%2 == 0) ? p1Name : p2Name;
        } else {
            return (turn%2 == 0) ? p1Name : "Computer";
        }
    
    } // getCurrentPlayer
    
    // returns true if it is the computer's turn
    public static boolean isComputerTurn(){
      return (numPlayers == 1 && turn%2 == 0);
    }
    
    // take computer turn
    public static void computerTakeTurn(){
       String computerInput = "";
	   int index = 0;
	   int letter = 0;
	   char[] word = new char[4];
	   char[] goal = new char[4];
	   String randomLetters = "";
	   int chance = 1;
	   
       
       // you might process the computer's random input here
       
	   
	if(turn == 0) {
		if(numRand == -1) {
			for(int i = 0; i < 4; i++) {
				for(int j = 0; j != -1;) {
					letter = (97 + (int)(Math.random() * 26));
					
					word[i] = (char)letter;
					currentWord2 = new String (word);
					
					if(checkDictionary(" " + randomLetters + (char)letter) == true) {
						j = -1;
						randomLetters+=(char)letter;
					}
				}
				
			}
	    } else if(numRand == 5 || numRand == 15) {
			int timesRun = 0;
			currentWord2 = currentWord;
			String currentWord3 = "";
			System.out.println(currentWord + "CurrentWord");
			System.out.println(numRand + "numrand");
			for(int i = 0; i < numRand; i++) {
				System.out.println(currentWord2 + "CurrentWord2");
				do {
					System.out.println(timesRun);
					if(timesRun == 3000) {
						JOptionPane.showMessageDialog(null, "The program could not find another word, so there likely wasn't one.");
						System.exit(0);
					}
					currentWord2 = currentWord2.toLowerCase();
					index = 0 + (int)(Math.random() * 4);
					letter = 97 + (int)(Math.random() * 26);
					word = currentWord2.toCharArray();
		
					word[index] = (char)letter;
			
					currentWord3 = new String (word);
					timesRun++;
				} while(checkDictionary(currentWord3) == false || currentWord3.equals(currentWord2.toLowerCase()));
				currentWord2 = new String (word);
				goalWord = currentWord2;
				timesRun = 0;
			
			}
		} else {
			System.out.println("numRand is" + numRand);
		}
		
		goalWord = currentWord2;
		computerInput = currentWord2;
	} else {
		goal = (goalWord.toLowerCase()).toCharArray();
		
		
		
		
		//generate the new word, then check it against the dictionary && old word
		do {
				chance = 1;
				currentWord2 = currentWord.toLowerCase();
				index = 0 + (int)(Math.random() * 4);
				letter = 97 + (int)(Math.random() * 26);
				word = currentWord2.toCharArray();
		
				word[index] = (char)letter;
			
				currentWord2 = new String (word);
			
				
				if((word[0] == goal[0] && word[1] == goal[1] 
				     && word[2] == goal[2]) || (word[0] == goal[0] 
					 && word[1] == goal[1] && word[3] == goal[3])
					 || (word[0] == goal[0] && word[3] == goal[3] 
					 && word[2] == goal[2]) || (word[3] == goal[3] 
					 && word[1] == goal[1] && word[2] == goal[2])) {
					if(turn % 2 == 0) {
						currentWord2 = goalWord;
						} else {
					chance = index = 0 + (int)(Math.random() * 4);
					}
				}
			
				
			} while(checkDictionary(currentWord2) == false || currentWord2.equals(currentWord.toLowerCase()) && chance == 1);
			computerInput = currentWord2;
	}
	
	   //add computer's word to the list
       if(turn == 0) {
	   goalWord = computerInput;
	   }else{
			currentWord = computerInput;
			if(turn % 20 == 0 && turn != 0) {
				playOutputList = "";
			}
			playOutputList += "\n" + computerInput;
	   }
       turn++;
       displayTurn();
       
    }
    
    
    // display results from turn
    public static void displayTurn(){
    
        // set up strings for display
		 playOutput0 = "THE CHANGER OF LETTERS";
		 playOutput = "";
         playOutput1 = "Turn " + turn;
		 playOutput3 = "";
         playOutput4 = getOtherPlayer() + ": ";
         playOutput2 = currentWord;
		 playOutput6 = "goal word: " + goalWord;
        
      
         // set instructions to execute computer turn
         if (isComputerTurn()) {
             playOutput3 = "Press enter to see " + getCurrentPlayer() + "'s turn.";
         } 
         // else it is player 1 or 2's turn
         else if(turn == 2) {
             playOutput3 = getCurrentPlayer() + ", please enter the goal word.";
         }
		 else {
			playOutput3 = getCurrentPlayer() + ", please enter the new word.";
			}
         panel.repaint();
         
    
    } // displayTurn
    
    //saves the player's name
	private static void saveUserName() {
		//save player name
		if (p1Name.equals("")) {
		p1Name = dataEntered;
		resetDataEntered = true;
		} else if(numPlayers == 2 && p2Name.equals("")) {
		p2Name = dataEntered;
		resetDataEntered = true;
		}
		showGetUserNames();
	} //saveUserName
	
	//display username interface and start game when all games are entered
	private static void showGetUserNames() {
		if (p1Name.equals("")) {
			gameStage = ENTER_NAMES;
			playOutput = "Player 1, please enter your name:";
			playOutput2 = "";
		} else if (p2Name.equals("") && numPlayers == 2) {
			gameStage = ENTER_NAMES;
			playOutput = "Player 2, please enter your name:";
			playOutput2 = "";
		} else {
		gameStage = PLAY;
		startGame();
		}
		
		panel.repaint();
	
	}//showGetUserNames
	
	private static void showChooseDifficulty () {
		
		gameStage = CHOOSE_DIFFICULTY;
		panel.repaint();
	
	}//showGetUserNames
	
    // sets game up to instruct players to start game
    private static void startGame() {
        gameStage = PLAY;
        
        // reset all variables in case of previous game
        playOutputList = "";
        playOutput2 = "";
        playOutput4 = "";
        currentWord = "That isn't a word.";
        turn = -1;
        dataEntered = "";
		goalWord = "";
		
        
        
        // text to display
		 playOutput0 = "THE CHANGER OF LETTERS";
        playOutput = "Begin Play! ";
		if(turn == -1) {
        playOutput3 = getCurrentPlayer() + ", type the starting word";
		} else if(turn == 2) {
		playOutput3 = getCurrentPlayer() + ", type the goal word";
		} else {
		playOutput3 = getCurrentPlayer() + ", type the new word";
		}
        panel.repaint();
    } // playGame
	
	public static void displayStartWord(){
   
        // set up strings for display
		 playOutput0 = "THE CHANGER OF LETTERS";
         playOutput5 = "word receiver list";
         playOutput4 = getOtherPlayer() + ": ";
         playOutput2 = currentWord;
        
      
         // else it is player 1 or 2's turn
         
             playOutput3 = getCurrentPlayer() + ", enter the goal word.";
         
         panel.repaint();
         
    
    } // getStartWord
	
	public static void displayWrongWord(String error){
   
        // set up strings for display
		 playOutput0 = "THE CHANGER OF LETTERS";
		 playOutput = error;
         playOutput4 = getCurrentPlayer() + ": ";
         playOutput2 = "";
		 playOutput6 = "goal word: " + goalWord;
        
      
         // else it is player 1 or 2's turn
         
             playOutput3 = getCurrentPlayer() + " enter a valid four letter word.";
         
         panel.repaint();
         
    
    } // getStartWord
	
		public static void displayBigDifference() {
		
 
		
		 // set up strings for display
		 playOutput0 = "THE CHANGER OF LETTERS";
         playOutput = "Change one letter at a time! Your word is too different from the old one.";
         playOutput4 = getCurrentPlayer() + ": ";
         playOutput2 = currentWord;
        
      
        // else it is player 1 or 2's turn
        playOutput3 = getCurrentPlayer() + " enter a valid four letter word.";
         
         panel.repaint();
		
		
		}
	
	
	
    // Saves input entered by user into currentWord
    private static void saveInput() {
		
		
		if (dataEntered.length() < 4) {
			resetDataEntered = true;
			displayWrongWord("Your word is too small.");
			return;
		}
		if (dataEntered.length() > 4) {
			resetDataEntered = true;
			displayWrongWord("Your word is too big.");
			return;
		}
		if (dataEntered.equals(currentWord.toLowerCase())) {
			resetDataEntered = true;
			displayWrongWord("Your word is the same as the current word.");
			return;
		}
		if (checkDictionary(dataEntered.toLowerCase()) == true && ! dataEntered.contains(" ")) {
			
		} else {
			resetDataEntered = true;
			displayWrongWord("Your word isn't in the dictionary");
			return;
		}
		
    
         // save dataEntered into a more permanent location and reset it
		 if(turn == 0) {
			 goalWord = dataEntered;
			 System.out.println(goalWord);
			 resetDataEntered = true;
			 turn++;
			 displayTurn();
		 } else if (turn == -1) {
 		 
		  currentWord = dataEntered;
		 	 
         playOutputList += "\n" + currentWord;
         resetDataEntered = true;  // this will cause dataEntered to get erased
        
         turn++;  // record turn completed
		 displayStartWord();
		 } else {
		 if(checkWord() == true) {
         currentWord = dataEntered;
		 if(turn % 20 == 0 && turn != 0) {
			playOutputList = "";
		 }
         playOutputList += "\n" + currentWord;
         resetDataEntered = true;  // this will cause dataEntered to get erased
        
         turn++;  // record turn completed
         displayTurn();
		 } else {
			resetDataEntered = true;
			displayBigDifference();
		}
		}
    }

	// end game.
    private static void endGame() {
		 playOutput0 = "THE CHANGER OF LETTERS";
         playOutput = "This game is over.";
		 playOutput1 = getOtherPlayer() + " won";
		 playOutput2 = "In " + (turn - 1) + " turn(s).";
		 playOutput3 = "";
		 playOutput4 = "Press any key to return to menu";
         gameStage = END_GAME;
         panel.repaint();
    }


    /* Shuts program down when close button pressed */
    private static class ExitListener extends WindowAdapter {
        public void windowClosing(WindowEvent event) {
            System.exit(0);
        } // windowClosing
    } // ExitListener


    private static void showMenu() {
        gameStage = MENU;
		
		p1Name = "";
		p2Name = "";
        panel.repaint();
    } // showMenu

    // sets game up to display instructions
    private static void showInstructions() {
        gameStage = INSTRUCTIONS;
        panel.repaint();
    } // showInstructions

    
    /*  draw multi-line Strings
     *  author: John Evans
     */
    private static void drawString(Graphics g, String text, int x, int y) {
    
        // draws each line on a new line
        for (String line : text.split("\n")) {
            g.drawString(line, x, y += g.getFontMetrics().getHeight());
        } // for
    } // drawString
	
	public static boolean checkWord() {
		currentWord2 = currentWord.toLowerCase();
		dataEntered2 = dataEntered.toLowerCase();
		char [] data = dataEntered2.toCharArray();
		char [] current = currentWord2.toCharArray();
		
		if(data[0] == current[0] && data[1] == current[1] && data[2] == current[2]) {
			return true;
		}
		else if(data[0] == current[0] && data[1] == current[1] && data[3] == current[3]) {
			return true;
		}
		else if(data[0] == current[0] && data[3] == current[3] && data[2] == current[2]) {
			return true;
		}
		else if(data[3] == current[3] && data[1] == current[1] && data[2] == current[2]) {
			return true;
		}
		else {
		return false;
		}
		
		} //checkWord
		

} // Change One Letter
