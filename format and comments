/***************************************************************************************
* Name:        Change One leter
* Author:      Ryan Stroebel and Kunga Oesel
* Date:        Apr 20, 2018
* Purpose:     A graphical interface version of the Change One Letter Game by use of Java
****************************************************************************************/

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import java.io.*;

public class GameTemplate extends JPanel {
	
    static Image bgImage1;            		  // image displayed while play occurs for part 1
    static Image bgImage2;            		  // image displayed while play occurs for part 2
    static JPanel panel;            		  // main drawing panel
    static JFrame frame;                 	  // window frame which contains the panel
    static final int WINDOW_WIDTH = 800;   	  // width of display window
    static final int WINDOW_HEIGHT = 600; 	  // height of display window
	static String text = "";	  	  		  // string for texts in various stages of game
    static int gameStage = 0;            	  // stages of game
    static final int WELCOME_SCREEN = 0;  	  // the welcome screen stage
    static final int MENU = 1;				  // the menu page
    static final int INSTRUCTIONS = 2;		  // the instructions page
	static final int ENTER_NAMES = 3;		  // the page of the game to input player names
    static final int PLAY = 4;				  // the game playing stage
    static final int END_GAME = 5;			  // the page when the game finishes
	static String p1Name = "";				  // name of the first player
	static String p2Name = "";				  // name of the second player 
    static int numPlayers = 0;                // number of players
    static double runningTotal = 0;           // runningTotal of game
    static int turn = 1;                      // current turn of game (starts at turn 1)
    static String dataEntered = "";           // input from user
    static boolean resetDataEntered = false;  // used to reset dataEntered to empty string
    static String currentPlayer = "";         // tracks the currentplayer
    static String currentWord = "";           // tracks the currentWord
	static String goalWord = "";	   		  // tracks the goal word
	static String currentWord2 = "";          // a current word that does not change the original
	static String dataEntered2 = "";		  // Data entered that can be changed seperately from the actual data
    static String playOutput = "";            // output to panel in the playing stage
	static String playOutput0 = "";           // output to panel in the playing stage
    static String playOutput1 = "";           // output to panel in the playing stage
    static String playOutput2 = "";           // output to panel in the playing stage
    static String playOutput3 = "";           // output to panel in the playing stage
    static String playOutput4 = "";           // output to panel in the playing stage
	static String playOutput5 = "";	   		  // output to panel in the playing stage
	static String playOutput6 = "";			  // output to panel in the playing stage
    static String playOutputList = "";        // output all steps
    static String instructionsText = "";      // instructions
	public static String[] dictionary = getFileContents("dictionary.txt"); // declares dictionary for the whole class
	
    public static void main (String args[]) {
        // Create Image Object
        Toolkit tk = Toolkit.getDefaultToolkit();

        // Load background images
		URL url = GameTemplate.class.getResource("bg1.jpg");
        bgImage1 = tk.getImage(url); // bg1.jpg can be called upon as bgImage1
        url = GameTemplate.class.getResource("bg2.jpg");
        bgImage2 = tk.getImage(url); // bg2.jpg can be called upon as bgImage2
  
        // Create Frame and Panel to display graphics in
        panel = new GameTemplate(); 
  
        panel.setPreferredSize(new Dimension(WINDOW_WIDTH, WINDOW_HEIGHT));  // set size of application window
        frame = new JFrame ("THE CHANGER OF LETTERS");  // set title of window
        frame.add (panel);
  
        // add a key input listener (defined below) to our canvas so we can respond to key pressed
        frame.addKeyListener(new KeyInputHandler());
        
        // exits window if close button pressed
        frame.addWindowListener(new ExitListener());
  
  
        // request the focus so key events come to the frame
        frame.requestFocus();
        frame.pack();
        frame.setVisible(true);
    } // main
	
	
	// getting the contents of a file in the same folder
	public static String[] getFileContents(String fileName) {
		
		String[] contents = null;
		int length = 0;
		try {
			// input
			String folderName = ""; // if the file is contained in the same folder as the .class file, make this equal to the empty string
			String resource = fileName;
	
			// this is the path within the jar file
			InputStream input = GameTemplate.class.getResourceAsStream(folderName + resource);
			if (input == null) {
				// this is how we load file within editor (eg eclipse)
				input = GameTemplate.class.getClassLoader().getResourceAsStream(resource);
			} // if
			BufferedReader in = new BufferedReader(new InputStreamReader(input));
			in.mark(Short.MAX_VALUE);  // see api
	
			// count number of lines in file
			while (in.readLine() != null) {
				length++;
			} // while
	
			in.reset(); // rewind the reader to the start of file
			contents = new String[length]; // give size to contents array
	
			// read in contents of file and print to screen
			for (int i = 0; i < length; i++) {
				contents[i] = in.readLine();
			} // for
			in.close();
		} catch (Exception e) {
			System.out.println("File Input Error");
		} // try

		return contents;
		
	} // getFileContents

	// method for checking if a word is in dictionary
	public static boolean checkDictionary(String word) {
		 
		// checks if the word in the parameter is in the dictionary
		for (int i = 0; i < dictionary.length; i++) {
			if (dictionary[i].contains(word)) {
				return true;
			} // if
		} // for
		return false;
		
	} // checkDictionary
	
	// method for displaying strings in the interface
    private static void drawString(Graphics g, String text, int x, int y) {
    
        // draws each line on a new line
        for (String line : text.split("\n")) {
            g.drawString(line, x, y += g.getFontMetrics().getHeight());
        } // for
    } // drawString
	
   /*
   * paintComponent gets called whenever panel.repaint() is
   * called or when frame.pack()/frame.show() is called. It paints
   * to the screen.  Since we want to paint different things
   * depending on what stage of the game we are in, a variable
   * "gameStage" will keep track of this.
   */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);   // calls the paintComponent method of JPanel to display the background

        // display welcome screen
        if (gameStage == WELCOME_SCREEN) {
			
            g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); // draw background
			g.drawImage(bgImage1, 0, 0, this); // background image
            
            g.setColor(Color.black); // sets text color
            g.setFont(new Font("Garamond", Font.BOLD, 16)); // sets font
            g.drawString("Welcome to", 360, 260); // draws string at indicated coordinates
            g.drawString("Press any key to continue.",310,330);

            g.setColor(Color.white); // sets color
            g.setFont(new Font("Garamond", Font.BOLD, 36)); // text's font and size 
			text = "THE CHANGER OF LETTERS"; // welome screen's title
            g.drawString(text, (WINDOW_WIDTH - g.getFontMetrics().stringWidth(s))/2,300); // dispay the title at the coordinate

        // display menu
        } else if (gameStage == MENU) {
			
			g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); 
			g.drawImage(bgImage1, 0, 0, this); 
            g.setFont(new Font("Garamond", Font.BOLD, 16)); 
			
            g.setColor(Color.white); 
            g.setFont(new Font("Garamond", Font.BOLD, 36)); 
            drawString(g, "Change One Letter Game",180,180); 
			
            g.setFont(new Font("Garamond", Font.BOLD, 16)); 
            instructionsText = "Please make one of the following choices:\n\n1) Display Instructions.\n\n2) One Player Game\n\n3) Two Player Game\n\n4) Exit";
            drawString(g, instructionsText,230,280);
           
        // display instructions
        } else if (gameStage == INSTRUCTIONS) {
						
			g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); 
			g.drawImage(bgImage1, 0, 0, this); 
			
            g.setColor(Color.white);
			g.drawRect (25, 25, (WINDOW_WIDTH-50), (WINDOW_HEIGHT-50)); // white rectangle is drawn
			
            g.setFont(new Font("Garamond", Font.BOLD, 36)); 
			text = "Instructions";
            g.drawString(text, (WINDOW_WIDTH - g.getFontMetrics().stringWidth(s))/2,100);    
            g.setFont(new Font("Garamond", Font.PLAIN, 18));   
            
            instructionsText = "1. Both players(2 players/1 player and computer) inputs an english word: one start word, one goal word \n\n2. Each player then takes turns changing one letter from the current word to make a new word.\n\n3. When the goal word is reached, the player who inputs it wins and the game ends.\n\n4. Have fun!";
            drawString(g, instructionsText, 65, 150);  // displays instructions

		// display interface to get usernames
		} else if (gameStage == ENTER_NAMES) {
			
            g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT); 
			g.drawImage(bgImage1, 0, 0, this);
			
			g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 36));   
            drawString(g, playOutput, 100,100); // asks for players' names
			
			g.setColor(new Color(241,151,246));
			g.setFont(new Font("Garamond", Font.BOLD, 48));
			drawString(g, playOutput2, 100,250); // display player name
			
		// display interface for game playing stage
        } else if (gameStage == PLAY) {
            
            g.setColor(new Color(24,160,202));
            g.fillRect (0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
			g.drawImage(bgImage1, 0, 0, this);
			g.setColor(Color.white);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            
            // display contents of playOutput strings
			g.setColor(Color.white);
			g.setFont( new Font("Garamond", Font.BOLD, 16));
            drawString(g, playOutput1, 700, 135);
			
			g.setColor(new Color(135,206,250));
			g.setFont( new Font("Garamond", Font.BOLD, 16));
			drawString(g, playOutput, 20,150);
			
			g.setColor(new Color(211,187,224));
			g.setFont( new Font("Garamond", Font.BOLD, 20));
            drawString(g, playOutput3, 20, 300);
			
			g.setColor(new Color(241,151,246));//(243,226,232)
			g.setFont( new Font("Serif", Font.ITALIC, 50));
			drawString(g, playOutput0, 70, 3);			
             
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 24));
            drawString(g, playOutput4, 20, 200);
			
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 20));
            drawString(g, playOutput5, 600, 90);
            
			g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 20));
            drawString(g, playOutput6, 20, 100);
			
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 36));
            drawString(g, playOutput2, 20, 250); 
            
            // display all turns in a box on right side
            g.setColor(new Color(135,206,250));
			g.drawRect(580, 135, 200, 400);
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            drawString(g, playOutputList, 600, 120); 
			
        } else {
			// display end of game
			g.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
			g.drawImage(bgImage1, 0, 0, this);
            
			// set font and colour
            g.setColor(new Color(135,206,250));
            g.setFont(new Font("Garamond", Font.BOLD, 16));
            
            // display contents of playOutput strings
            drawString(g, playOutput, 20,50);  
            drawString(g, playOutput1, 20, 100); 
            drawString(g, playOutput2, 20, 150); 			
            drawString(g, playOutput3, 20, 200); 
			drawString(g, playOutput4, 20, 250);
			drawString(g, playOutput0, 20, 3);
          } // if
		  
    } // paintComponent

    // A class to handle keyboard input from the user.
    private static class KeyInputHandler extends KeyAdapter {
		
        public void keyTyped(KeyEvent e) {
			
            // quit if the user presses "escape"
            if (e.getKeyChar() == 27) {
				
                System.exit(0);		
				
            } else if (gameStage == MENU) {
				
				// respond to menu selection
                switch (e.getKeyChar()) {
                    case 49:  showInstructions(); break; // Key "1" pressed
                    case 50:  numPlayers = 1; showGetUserNames();  break; // Key "2" pressed
                    case 51:  numPlayers = 2; showGetUserNames(); break; // Key "3" pressed
                    case 52:  System.exit(0); // Key "4" pressed					
                } // switch
				
            } else if(gameStage == ENTER_NAMES) {
				
				//respond to keys typed when user(s) enter names
				if (resetDataEntered) {
                    resetDataEntered = false;
                    dataEntered = "";
					
                } // if
				
				// if user hits enter, record what is typed in
                if (e.getKeyChar() == Event.ENTER) {
                    saveUserName();
				} else {
				 recordKey(e.getKeyChar());
				} // if
				
			} else if (gameStage == PLAY) {
				
                // computer takes turn
                if (isComputerTurn()) {
                    computerTakeTurn();
                    return;
                } // if
           
                // resets typed input
                if (resetDataEntered) {
					resetDataEntered = false;
				    dataEntered = "";
                } // if

                // if user hits enter, record what is typed in
                if (e.getKeyChar() == Event.ENTER) {
                    saveInput();    
					if (currentWord.equals(goalWord)) {
						endGame();
                    } // if
                } else {
					recordKey(e.getKeyChar());
                } // if
				  
			} else {
				
                showMenu(); // if all else fails, show menu
				
            } // if 		
        } // keyTyped
		
    } // KeyInputHandler

	// add key typed to dataEntered
    private static void recordKey(char key) {

        // if backspace is pressed, last character is removed; else pressed character is added to string
        if (key == 8 && dataEntered.length() > 0) {
            dataEntered = dataEntered.substring(0,dataEntered.length()-1);
        } else {
            dataEntered += (key + "");
        } // if
		
        playOutput4 = getCurrentPlayer() + " entered ";
        playOutput2 = dataEntered;
        panel.repaint();
		
    } // recordKey  
	
	// sets game up to display menu stage
    private static void showMenu() {
		
        gameStage = MENU;
		
		p1Name = "";
		p2Name = "";
		
        panel.repaint();
		
    } // showMenu
	
	// sets game up to display instructions
    private static void showInstructions() {
		
        gameStage = INSTRUCTIONS;
		
        panel.repaint();
		
    } // showInstructions
    
	// returns name of currentPlayer
    private static String getCurrentPlayer(){
		
        if (numPlayers == 2) {
            return (turn%2 != 0) ? p1Name : p2Name;
        } else {
            return (turn%2 != 0) ? p1Name : "Computer";
        } // if
		
    } // getCurrentPlayer
    
    // returns name of other player
    private static String getOtherPlayer(){
		
        if (numPlayers == 2) {
            return (turn%2 == 0) ? p1Name : p2Name;
        } else {
            return (turn%2 == 0) ? p1Name : "Computer";
        } // if
    
	} // getOtherPlayer
        
	// saves the name of the players
	private static void saveUserName() {
		
		// save player name
		if (p1Name.equals("")) {
			p1Name = dataEntered;
			resetDataEntered = true;
		} else if (numPlayers == 2 && p2Name.equals("")) {
			p2Name = dataEntered;
			resetDataEntered = true;
		} // if
		showGetUserNames();
		
	} // saveUserName
	
	// display username interface and start game when all names are entered
	private static void showGetUserNames() {
		// if names have not been decided yet, interface will ask for names; otherwise, game begins
		if (p1Name.equals("")) {
			gameStage = ENTER_NAMES;
			playOutput = "Player 1, please enter your name:";
			playOutput2 = "";
		} else if (p2Name.equals("") && numPlayers == 2) {
			gameStage = ENTER_NAMES;
			playOutput = "Player 2, please enter your name:";
			playOutput2 = "";
		} else {
		gameStage = PLAY;
		startGame();
		}
		
		panel.repaint();
	
	} // showGetUserNames
	
	// sets game up to instruct players to start game
    private static void startGame() {
		
        gameStage = PLAY;
       
        // reset all variables
        playOutputList = "";
        playOutput2 = "";
        playOutput4 = "";
        currentWord = "That isn't a word.";
        turn = -1;
        dataEntered = "";
		goalWord = "";
           
        // text to display depending on player turn
		playOutput0 = "THE CHANGER OF LETTERS";
        playOutput = "Begin Play! ";
		if(turn == -1) {
			playOutput3 = getCurrentPlayer() + ", type the starting word";
		} else if(turn == 2) {
			playOutput3 = getCurrentPlayer() + ", type the goal word";
		} else {
			playOutput3 = getCurrentPlayer() + ", type the new word";
		}
		
        panel.repaint();
		
    } // startGame
	
	// interface displays the starting word
	public static void displayStartWord(){
   
        // set up strings for display
		playOutput0 = "THE CHANGER OF LETTERS";
        playOutput5 = "word receiver list";
        playOutput4 = getOtherPlayer() + ": ";
        playOutput2 = currentWord;
        playOutput3 = getCurrentPlayer() + ", enter the goal word."; // if it is player 2's turn
        
        panel.repaint();      
    
    } // displayStartWord
	
	// returns true if it is the computer's turn
    public static boolean isComputerTurn(){
		
      return (numPlayers == 1 && turn%2 == 0);
    
	} // isComputerTurn
    
    // take computer's turn
    public static void computerTakeTurn(){
		
		String computerInput = ""; // this is the word that the computer's inputs
		int index = 0; // index of a letter of the word
		int letter = 0; // the letter at the index
		char[] word = new char[4]; // char array of current word
		char[] goal = new char[4]; // char array of goal word
		String randomLetters = ""; // String that random letters are added to determine goal word
		int chance = 1; // acts as a checker value 
	  
		// if the computer has to pick a goal word
		if(turn == 0) {
	   
			for(int i = 0; i < 4; i++) {
				for(int j = 0; j != -1;) {
					letter = (97 + (int)(Math.random() * 26));
					
					word[i] = (char)letter;
					currentWord2 = new String (word);
					
					if(checkDictionary(" " + randomLetters + (char)letter) == true) {
						j = -1;
						randomLetters+=(char)letter;
					} // if
				} // for
			} // for

			goalWord = currentWord2; 
			computerInput = currentWord2; 		
		} else {
			goal = (goalWord.toLowerCase()).toCharArray(); // goal word is turned into lower case and then into a char array
		
			//generate the new word, then check it against the dictionary && old word
			do {
				currentWord2 = currentWord.toLowerCase();
				index = 0 + (int)(Math.random() * 4);
				letter = 97 + (int)(Math.random() * 26);
				word = currentWord2.toCharArray();
				word[index] = (char)letter;
				currentWord2 = new String (word);
			
				// makes computer win if possible
				if((word[0] == goal[0] && word[1] == goal[1] 
					&& word[2] == goal[2]) || (word[0] == goal[0] 
					&& word[1] == goal[1] && word[3] == goal[3])
					|| (word[0] == goal[0] && word[3] == goal[3] 
					&& word[2] == goal[2]) || (word[3] == goal[3] 
					&& word[1] == goal[1] && word[2] == goal[2])) {
					if(turn % 2 == 0) {
						currentWord2 = goalWord;
					} else {
						chance = index = 0 + (int)(Math.random() * 4);
					} // if
				} // if
				
			} while(checkDictionary(currentWord2) == false || currentWord2.equals(currentWord.toLowerCase()) && chance == 1);
			computerInput = currentWord2;
		} // if
	
	    //add computer's word to the list
        if(turn == 0) {
	    goalWord= computerInput;
	    } else {
			currentWord = computerInput;
			if(turn % 20 == 0 && turn != 0) {
				playOutputList = "";
			} // if
			playOutputList += "\n" + computerInput;
	    } // if
        turn++;
        displayTurn();
       
    } // computerTakeTurn
    
    // display results from turn
    public static void displayTurn(){
    
        // set up strings for display
		 playOutput0 = "THE CHANGER OF LETTERS";
		 playOutput = "";
         playOutput1 = "Turn " + turn;
		 playOutput3 = "";
         playOutput4 = getOtherPlayer() + ": ";
         playOutput2 = currentWord;
		 playOutput6 = "goal word: " + goalWord;
        
      
        // set instructions to execute computer or players' turn
        if (isComputerTurn()) {
            playOutput3 = "Press enter to see " + getCurrentPlayer() + "'s turn.";
        } else if(turn == 2) {
            playOutput3 = getCurrentPlayer() + ", please enter the goal word.";
        } else {
			playOutput3 = getCurrentPlayer() + ", please enter the new word.";
		} // if
        panel.repaint();
    
    } // displayTurn
 	
	// Saves input entered by user into currentWord
    private static void saveInput() {
	
		if (dataEntered.length() < 4) {
			resetDataEntered = true;
			displayWrongWord("Your word is too small.");
			return;
		} // if
		
		if (dataEntered.length() > 4) {
			resetDataEntered = true;
			displayWrongWord("Your word is too big.");
			return;
		} // if
		
		if (dataEntered.equals(currentWord.toLowerCase())) {
			resetDataEntered = true;
			displayWrongWord("Your word is the same as the current word.");
			return;
		} // if
		
		if (checkDictionary(dataEntered.toLowerCase()) == true && !dataEntered.contains(" ")) {
			
		} else {
			resetDataEntered = true;
			displayWrongWord("Your word isn't in the dictionary");
			return;
		} // if
		
    
        // saves dataEntered into a more permanent location and reset it
		if(turn == 0) {
			goalWord = dataEntered;
			resetDataEntered = true; // this will cause dataEntered to get erased
			turn++; // record turn completed
			displayTurn(); // begins next turn
		} else if (turn == -1) { 
			currentWord = dataEntered;	 
			playOutputList += "\n" + currentWord;
			resetDataEntered = true;
			turn++;  
			displayStartWord();
		} else {
			if(checkWord() == true) {
				currentWord = dataEntered;
				
				// if word list is over 20, list is rewritten
				if(turn % 20 == 0 && turn != 0) {
					playOutputList = "";
				} // if
				
				playOutputList += "\n" + currentWord;
				resetDataEntered = true;  
				turn++;  
				displayTurn();
			} else {
				resetDataEntered = true;
				displayBigDifference();
			} // if
		} // if
    } // saveInput
	
	// interface displays an error message for words inputed that are too long, short, or not in dictionary
	public static void displayWrongWord(String error){
   
        // set up strings for display
		playOutput0 = "THE CHANGER OF LETTERS";
		playOutput = "ERROR: " + error; // the String error will be written when the error is commited
        playOutput4 = getCurrentPlayer() + ": ";
        playOutput2 = "";
		playOutput6 = "goal word: " + goalWord;      
        playOutput3 = getCurrentPlayer() + " enter a valid four letter word.";
        
        panel.repaint();
         
    } // getStartWord
	
	// method to see if player only changed 1 letter from the previous word
	public static boolean checkWord() {
		currentWord2 = currentWord.toLowerCase();
		dataEntered2 = dataEntered.toLowerCase();
		char [] data = dataEntered2.toCharArray();
		char [] current = currentWord2.toCharArray();
		
		if(data[0] == current[0] && data[1] == current[1] && data[2] == current[2]) {
			return true;
		}
		else if(data[0] == current[0] && data[1] == current[1] && data[3] == current[3]) {
			return true;
		}
		else if(data[0] == current[0] && data[3] == current[3] && data[2] == current[2]) {
			return true;
		}
		else if(data[3] == current[3] && data[1] == current[1] && data[2] == current[2]) {
			return true;
		}
		else {
		return false;
		}
		
	} // checkWord
	
	// interface displays an error message in the case that player changed more than 1 letter at a turn
	public static void displayBigDifference() {
	
		// set up strings for display
		playOutput0 = "THE CHANGER OF LETTERS";
		playOutput = "Change one letter at a time! Your word is too different from the old one.";
        playOutput4 = getCurrentPlayer() + ": ";
        playOutput2 = currentWord;  
        playOutput3 = getCurrentPlayer() + " enter a valid four letter word.";
         
        panel.repaint();
			
	} // displayBigDifference
 
	// end game stage interface.
    private static void endGame() { 
	
		playOutput0 = "THE CHANGER OF LETTERS";
        playOutput = "This game is over.";
		playOutput1 = getOtherPlayer() + " won";
		playOutput2 = "In " + (turn - 1) + " turn(s).";
		playOutput3 = "";
		playOutput4 = "Press any key to return to menu";
		gameStage = END_GAME;
		panel.repaint();
		
    } // endGame

    /* Shuts program down when close button pressed */
    private static class ExitListener extends WindowAdapter {
		
        public void windowClosing(WindowEvent event) {
            System.exit(0);
        } // windowClosing
		
    } // ExitListener


} // TheChangerOfLetters
